=====================================
はじめての Django アプリ作成、その 1 
=====================================

:revision-up-to: 17812 (1.4)

さあ、例を交えながら学んでゆきましょう。

このチュートリアルでは、簡単な投票 (poll) アプリケーションの作成に取り組ん
でもらいます。

Poll アプリケーションは、

* ユーザが投票したり結果を表示したりできる公開用サイト
* 投票項目の追加、変更、削除を行うための管理 (admin) サイト

の二つの部分に分かれています。

:doc:`Django は既にインストール済み </intro/install>` として、説明を進めます。
Django がインストールされているかどうかは、Python 対話シェルを起動して
``import django`` を実行してみればわかります。エラーなく import できるなら、
Django はインストールされています。

.. admonition:: 困ったときは:

    このチュートリアルを進めてゆく上で困ったことがあったら、 
    `django-users <http://groups.google.com/group/django-users>`__ や
    ``irc.freenode.net`` の 
    `#djangoチャネル <irc://irc.freenode.net/django>`__ で誰か助けてくれそ
    うな人と話してみてください。

プロジェクトの作成
==================

初めて Django を使うのなら、最初のセットアップを行う必要があります。通常は、
Django の :term:`プロジェクト` (:term:`project`) を構成するコードを自動生成
します。プロジェクトとは、データベースの設定や Django 固有のオプション、ア
プリケーション固有の設定などといった、個々の Django インスタンスの設定をあ
つめたものです。

コマンドラインから、コードを置きたい場所に ``cd`` して、以下のコマンドを
実行してください。

.. code-block:: bash

   django-admin.py startproject mysite

現在のディレクトリに ``mysite`` ディレクトリが作成されます。

.. admonition:: ディストリビューションパッケージでスクリプトの名前が違うかも

   もし apt-get や yum のような Linux ディストリビューションのパッケージ
   マネージャを使って Django をインストールした場合、 ``django-admin.py``
   は ``django-admin`` に名前が変更されている場合があります。その場合は、
   これ以降のドキュメント内で出てくるそれぞれのコマンドから ``.py`` を削除
   して操作を続けてください。

.. admonition:: Max OS X でのパーミッションに関するエラー
 
   Mac OS X を使っている場合、 ``django-admin.py startproject`` を実行しよ
   うとすると、 "permission denied" というメッセージが出ることがあります。
   OS X のような Unix ベースのシステムでは、ファイルをプログラムとして実行
   したい場合に、ファイルに「プログラムとして実行可能」というマークをつけて
   おく必要があるためです。ファイルに実行可能マークをつけるには、
   Terminal.app を起動して、 :doc:`django-admin.py </ref/django-admin>` を収
   めているディレクトリに ( ``cd`` コマンドで) 移動して、 
   ``sudo chmod +x django-admin.py`` を実行してください。

.. note::
 
    プロジェクトの名前を付けるとき、組み込みの Python モジュールや Django
    のコンポーネントの名前を使わないようにしてください。とりわけ、 
    ``django`` (Django 自体と名前が衝突します) や ``test`` (組み込みの
    Python パッケージ名と名前が衝突します) を使わないようにしましょう。

``python setup.py`` ユーティリティで Django をインストールしたのなら、
:doc:`django-admin.py </ref/django-admin>` はシステムパスのどこかにあるはず
です。パス上になければ、 ``site-packages/django/bin`` にあります。
``site-packages`` は Python インストールディレクトリの中にあります。パス上
のどこか、例えば :file:`/usr/local/bin` に
:doc:`django-admin.py </ref/django-admin>` へのシンボリックリンクを張って
おきましょう。

.. admonition:: コードはどこに置くの？

    PHP の経験があるなら、これまでは Web サーバのドキュメントルート下
    (``/var/www`` といった場所) にコードを配置してきたことでしょう。 Django
    ではそうする必要はありません。むしろ Python コードをドキュメントルート
    下に置くのは賢明ではありません。コードをドキュメントルート下に置くと、
    誰かがコードを Web を介して読めるようになってしまうからです。これは安全
    上よろしくありません。

    コードはドキュメントルートの **外** 、例えば :file:`/home/mycode` の
    ような場所に置きましょう。

:djadmin:`startproject` が何を作成したかをみてみましょう::

    mysite/
        manage.py
        mysite/
            __init__.py
            settings.py
            urls.py
            wsgi.py

.. admonition:: 自分のレイアウトと違う場合

    デフォルトのプロジェクトのレイアウトが最近変わりました。もし、フラットな
    レイアウトの場合 (内側の :file:`mysite/` ディレクトリがない場合) は、この
    チュートリアルのバージョンとは違う Django のバージョンを使用していること
    でしょう。古いチュートリアルを参照するか、新しいバージョンの Django を
    入手してください。

ファイルはそれぞれ以下のような役割を持っています:

* 外側の :file:`mysite/` ディレクトリは、このプロジェクトのただの入れ物です。
  名前は Django に関係しませんので、好きな名前に変更できます。

* :file:`manage.py`: Django プロジェクトに対する様々な操作を行うための
  コマンドラインユーティリティです。詳しくは :doc:`/ref/django-admin`
  を参照してください。

* 内側の :file:`mysite/` ディレクトリは、このプロジェクトの本当の Python
  パッケージです。この名前が Python パッケージの名前であり、 import の際に
  使用する名前です (例えば ``import mysite.settings``) 。

* :file:`mysite/__init__.py`: このディレクトリが Python パッケージであることを
  Python に知らせるための空のファイルです。(Python の初心者は、 Python の公式
  ドキュメントの `パッケージの詳しい説明`_ を読んで下さい。)

* :file:`mysite/settings.py`: Django プロジェクトの設定ファイルです。
  設定の仕組みは :doc:`/topics/settings` を参照してください。

* :file:``mysite/urls.py``: Django プロジェクトの URL 宣言、いうなれば Django
  サイトにおける「目次」に相当します。詳しくは :doc:`/topics/http/urls` を参照
  してください。

* :file:`mysite/wsgi.py`: WSGI互換のある Web サーバでプロジェクトを動かすための
  エントリーポイントです。詳しくは :doc:`/howto/deployment/wsgi/index` を参照
  してください。


.. _`パッケージの詳しい説明`: http://www.python.jp/doc/2.7/tutorial/modules.html#tut-packages
.. _more about packages: http://docs.python.org/tutorial/modules.html#packages

開発用サーバ
------------

プロジェクトがうまく動作するか確かめましょう。外側の :file:`mysite` ディレク
トリに移り、 ``python manage.py runserver`` を実行してください。以下のような
メッセージが表示されるはずです::

    Validating models...
    0 errors found.

    Django version 1.4, using settings 'mysite.settings'
    Development server is running at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

これで、 Django 開発サーバを起動しました。 Django 開発サーバは Python だけ
で書かれた軽量な Web サーバです。このサーバは、開発を迅速に行い、運用に適し
た状態になるまで Apache のような運用サーバの設定をいじらなくても良いように
するためのものです。

ここでちょっと注意しておきましょう。このサーバは開発中の利用だけを考えて作
られているため、絶対に運用環境では使わないようにしてください (筆者たちの専
門は Web フレームワークであって、 Web サーバではありません)。

さあ、これでサーバが起動したので、ブラウザで http://127.0.0.1:8000/ にアク
セスしてみてください。 "Welcome to Django" と表示された、明るいパステル調の
ライトブルーのページが出るはずです。やったね！

.. admonition:: ポート番号の変更

    デフォルトでは、 :djadmin:`runserver` コマンドを実行すると、開発用サー
    バはポート番号 8000 で起動します。サーバのポート番号を変更したければ、
    コマンドライン引数で指定します。例えばポート番号を 8080 にしたければ以
    下のようにしてください:

    .. code-block:: bash

        python manage.py runserver 8080

    サーバの IP を指定するときには、ポート番号も一緒に指定します。従って、
    全ての IP からのリクエストを受け付ける (サーバを他のコンピュータから可
    視にする) には、以下のようにします:

    .. code-block:: bash

        python manage.py runserver 0.0.0.0:8000

    開発サーバの詳細な説明は :djadmin:`runserver` のリファレンスを参照して
    ください。


.. _Database setup:

Database の設定
---------------

それでは、 :file:`mysite/settings.py` を編集しましょう。
:file:`mysite/settings.py` は Django の設定を表現する通常の Python モジュール
です。 :setting:`DATABASES` ``'default'`` の中の以下のキーを書き換えて、お使
いのデータベースへの接続パラメタに合わせましょう:

* :setting:`ENGINE <DATABASE-ENGINE>` --
  ``'django.db.backends.postgresql_psycopg2'``,
  ``'django.db.backends.mysql'``, ``'django.db.backends.sqlite3'`` または
  ``'django.db.backends.oracle'`` のいずれかです。
  他にも :setting:`いくつか <DATABASE-ENGINE>` あります。

* :setting:`NAME`` -- データベースの名前です。 SQLite を使っている場合には
  データベースファイルのフルパス (絶対パス) にします。
  指定したパスのファイルが存在しなければ、 Django は最初にデータベースの同期
  を実行したときにファイルを生成します (後で解説します)。

  パスを指定するときには、 Windows 環境でも必ずスラッシュ (``/``) を区切り文字
  に使ってください (例: ``C:/homes/user/mysite/sqlite3.db``)

* :setting:`USER` -- データベースのユーザ名です (SQLite では使いません)。

* :setting:`PASSWORD` -- データベースのパスワードです。
  (SQLite では使いません)。

* :setting:`HOST` -- データベースのあるホストです。データベースサーバが物理的に
  同じマシン上にあるのなら空文字列にしておきます。(SQLite では使いません)。


データベースをあまり扱ったことがないのなら、 :setting:`ENGINE` に
``'django.db.backends.sqlite3'`` を指定して SQLite を使用することをお勧めしま
す。 SQLite はバージョン 2.5 以降の Python に組み込まれているので、特にインス
トールする必要がありません。

.. note::

    PostgreSQL や MySQL を使っている場合、この時点でデータベースを作成して
    おいてください。データベースを作成するには、データベースの対話プロンプ
    トで "``CREATE DATABASE database_name;``" を実行します。

    SQLite を使う場合には、予め何か作成しておく必要はありません。データベー
    スファイルは、必要に応じて自動的に生成されます。

:file:`settings.py` を編集する際、 :setting:`TIME_ZONE` にタイムゾーンをセット
してください。デフォルト値はアメリカのセントラルタイムゾーン (シカゴ) になり
ます。また、ファイルの末尾近くにある :setting:`INSTALLED_APPS` 設定に注意して
ください。この変数には、現在の Django インスタンスで有効な全ての Django アプリ
ケーションの名前が入ります。アプリケーションは複数のプロジェクトで利用でき、
配布もできます。

デフォルトでは :setting:`INSTALLED_APPS` には以下のアプリケーションが入って
います。これらのアプリケーションはいずれも Django に付属のものです:

* :mod:`django.contrib.auth` -- 認証システムです。

* :mod:`django.contrib.contenttypes` -- コンテンツタイプフレームワークです。

* :mod:`django.contrib.sessions` -- セッションフレームワークです。

* :mod:`django.contrib.sites` -- 一つの Django で複数のサイトを管理する
  ためのフレームワークです。

* :mod:`django.contrib.messages` -- メッセージフレームワークです。

* :mod:`django.contrib.staticfiles` -- 静的なファイルを管理するための
  フレームワークです。

これらの機能はよく使われるのでデフォルトで付属しています。

上に挙げたアプリケーションは、必ず少なくとも一つのデータベーステーブルを使
います。そこで、アプリケーションを使う前にテーブルを作成しておく必要があり
ます。テーブルを作成するには以下のコマンドを使います:

.. code-block:: bash

    python manage.py syncdb

:djadmin:`syncdb` コマンドは :setting:`INSTALLED_APPS` 設定を探し、 
:file:`settings.py` のデータベース設定に従ってデータベース上に必要なテーブ
ルを作成します。コマンドが生成したデータベースを示すメッセージが表示され、
認証システムで使うスーパユーザアカウントを作成したいかどうか尋ねるプロンプ
トが出ます。アカウントを作成しておきましょう。

Django がどんなテーブルを作成したか興味があるなら、データベースのコマンドラ
インクライアントを使って、 ``\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), 
あるいは ``.schema`` (SQLite) と入力してみましょう。

.. admonition:: ミニマリストのために

    上で述べたように、デフォルトのアプリケーションはよくあるケースに対応す
    るために入っているにすぎず、誰もが必要としているわけではありません。デ
    フォルトアプリケーションの一部なり全部なりが必要なければ、 
    :djadmin:`syncdb` を実行する前に該当する行をコメントアウトするか削除し
    てかまいません。 :djadmin:`syncdb` コマンドは :setting:`INSTALLED_APPS`
    にあるアプリケーションのテーブルを生成しているにすぎません。

.. _creating-models:

モデルの作成
============

さあ、これで自分用の環境、すなわちプロジェクトが立ち上がり、作業にとりかか
る準備ができました。

Django で書いたアプリケーションは Python パッケージからなり、 ある規約に従っ
て `Python パス`_ のどこかに置かねばなりません。Django にはアプリケーション
の基本的なディレクトリ構造を作成するためのユーティリティがついてくるので、
ディレクトリの作成は気にせずコードの記述に集中できます。

.. admonition:: プロジェクトとアプリケーション

    プロジェクトとアプリケーションの違いとは何でしょうか？アプリケーション
    とは、実際に何らかの処理を行う Web アプリケーションを指します。例えばブ
    ログシステムや公開レコードのデータベース、単純な投票アプリといった具合
    です。プロジェクトとは、あるウェブサイト向けに設定とアプリケーションを
    集めたものです。一つのプロジェクトには複数のアプリケーションを入れられ
    ます。また、一つのアプリケーションは複数のプロジェクトで使えます。

このチュートリアルでは、簡単のため、投票アプリケーションを :file:`mysite`
ディレクトリの中に作ります。その結果、アプリケーションはプロジェクトとカッ
プリングします。すなわち、 poll アプリケーション内の Python コードは
``mysite.polls`` のように参照されることになります。チュートリアルの後半では、
アプリケーションを配布用に脱カップリングする方法について議論する予定です。
アプリケーションは、 `Python パス`_ のどこにでも置くことができます。この
チュートリアルでは、投票アプリケーションを :file:`manage.py` ファイルのすぐ
隣に作り、 ``mysite`` のサブモジュールというより、自身のトップレベルのモジュ
ールとして import できるようにします。

アプリケーションを作成するには、 :file:`manage.py` と同じディレクトリに入っ
て、以下のようなコマンド:

.. code-block:: bash

    python manage.py startapp polls

を入力します。このコマンドは :file:`polls` というディレクトリを作成し、その
中に以下のようにファイルを配置します::

    polls/
        __init__.py
        models.py
        tests.py
        views.py

このディレクトリ構造こそが、 poll アプリケーションの全体像です。

Django でデータベース Web アプリケーションを書くための最初のステップは、モ
デルの定義です。本質的には、データベースのレイアウトと、追加のメタデータの
定義です。

.. admonition:: 設計哲学 
    :class: admonition-philosophy
   
    モデルは、手持ちのデータに対する唯一 (single) の決定的な (definitive)
    ソースです。モデルには自分が格納したいデータにとって必要不可欠なフィー
    ルドと、そのデータの挙動を収めます。 Django は :ref:`DRY 則 <dry>` に従っ
    ています。Django のモデルの目的は、ただ一つの場所でデータモデルを定義し、
    そこから自動的にデータを取り出すことにあります。

これから開発する簡単な poll アプリケーションでは、投票項目 (poll) と選択肢
(choice) の二つのモデルを作成します。 poll には質問事項 (question) と公開日
(publication date) の情報があります。 choice には選択肢のテキストと投票数
(vote) という二つのフィールドがあります。各 choice は一つの poll に関連づけ
られています。

Django では、こうした概念を簡単な Python クラスで表現できます。
:file:`polls/models.py` ファイルを以下のように編集してください::

    from django.db import models

    class Poll(models.Model):
        question = models.CharField(max_length=200)
        pub_date = models.DateTimeField('date published')

    class Choice(models.Model):
        poll = models.ForeignKey(Poll)
        choice = models.CharField(max_length=200)
        votes = models.IntegerField()

コードは単純明解ですね。各モデルは一つのクラスで表現され、いずれも
:class:`django.db.models.Model` のサブクラスです。各モデルには複数のクラス
変数があり、個々のクラス変数はモデルのデータベースフィールドを表現していま
す。

各フィールドは :class:`~django.db.models.Field` クラスのインスタンスとして
表現されています。例えば、 :class:`~django.db.models.models.CharField` は
文字のフィールドで、 :class:`~django.db.models.DateTimeField` は日時フィー
ルドです。こうしたクラスは、各フィールドにどのようなデータ型を記憶させるか
を Django に教えます。

:class:`models.*Field`` インスタンスの名前 (``question`` や ``pub_date``)
はフィールドの名前で、計算機にとって扱いやすい名前を付けます。この名前は
Python コードの中で使いますし、データベースではカラム名に使います。

:class:`django.db.models.Field` の第一固定引数には、オプションとして人間可
読なフィールド名も指定できます。このフィールド名は Django の二つの内省
(introspection) 機能で使う他、ドキュメントとしての役割も果たします。人間可
読なフィールド名を指定しない場合、 Django は機械可読な名前を使います。上の
例では、 ``Poll.pub_date`` にだけ人間可読なフィールド名を指定しました。モデ
ルの他のフィールドでは、フィールドの機械可読な名前は人間可読な名前としても
十分なので定義していません。

:class:`~django.db.models.Field` クラスの中には必須の引数を持つものがありま
す。例えば :class:`~django.db.models.CharField` には
:attr:`~django.db.models.Field.max_length` を指定する必要があります。この引
数はデータベーススキーマで使われる他、後で述べるバリデーションでも使われま
す。

最後に、 :class:`~django.db.models.ForeignKey` を使ってリレーションが定義さ
れていることに注意して下さい。このリレーションは、各 Choice が一つの Poll
に関連づけられていることを Django に教えます。 Django は多対一、多対多、一
対一といった、広く使われているリレーション全てをサポートしています。


.. _`Python パス`: http://www.python.jp/doc/2.7/tutorial/modules.html#tut-searchpath
.. _`Python path`: http://docs.python.org/tutorial/modules.html#the-module-search-path

モデルを有効にする
==================

前述のようなほんのわずかなコードをモデルに書くだけで、 Django はたくさんの
情報を手にします。このコードを使って、 Django は:

* アプリケーションのデータベーススキーマを作成 (``CREATE TABLE`` 文を実
  行) できます。
* Poll や Choice オブジェクトに Python からアクセスするためのデータベー
  ス API を作成できます。

ただし、その前に ``polls`` アプリケーションをインストールしたことをプロジェ
クトに教えてやる必要があります。

.. admonition:: 設計哲学
    :class: admonition-philosophy

    Django アプリケーションは「プラガブル (pluggable)」です。アプリケーショ
    ンは特定の Django インストールに結び付いていないので、アプリケーション
    を複数のプロジェクトで使ったり、単体で配布したりできます。

再度 :file:`settings.py` ファイルを編集して、 :setting:`INSTALLED_APPS` 設
定を変更し、 ``'polls'`` を入れます。以下のようになるはずです::

    INSTALLED_APPS = (
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        # Uncomment the next line to enable the admin:
        # 'django.contrib.admin',
        # Uncomment the next line to enable admin documentation:
        # 'django.contrib.admindocs',
        'polls',
    )

これで Django は ``polls`` アプリケーションが入っていることを知りました。
もう一つコマンドを実行してみましょう:

.. code-block:: bash

    python manage.py sql polls

以下のような (polls アプリケーション用の CRATE TABLE SQL 文) が表示されるは
ずです:

.. code-block:: sql

    BEGIN;
    CREATE TABLE "polls_poll" (
        "id" serial NOT NULL PRIMARY KEY,
        "question" varchar(200) NOT NULL,
        "pub_date" timestamp with time zone NOT NULL
    );
    CREATE TABLE "polls_choice" (
        "id" serial NOT NULL PRIMARY KEY,
        "poll_id" integer NOT NULL REFERENCES "polls_poll" ("id") DEFERRABLE INITIALLY DEFERRED,
        "choice" varchar(200) NOT NULL,
        "votes" integer NOT NULL
    );
    COMMIT;

以下の点に注意してください:

* 実際に出力される SQL 文は、使っているデータベースによって変わります。

* テーブル名はアプリケーションの名前 (``polls``) とモデルの小文字表記
  (``poll`` および ``choice``) を使って自動的に生成されます (この挙動は
  オーバライドできます。)

* 主キー (primary key, ID) は自動的に生成されます (この挙動もオーバライ
  ド可能です)

* 便宜上、 Django は外部キーのフィールド名に ``"_id"`` を追加します。も
  ちろんこの挙動もオーバライド可能です。

* 外部キーのリレーションは ``REFERENCES`` 文で明示的に作成されます。

* SQL 文は使っているデータベースに応じて細かく調整されます。従って、
  ``auto_increment`` (MySQL)、 ``serial`` (PostgreSQL)、 
  ``integer primary key`` (SQLite) といったデータベース固有のフィールド
  タイプは自動的に指定されます。クオートの仕方、すなわち一重と二重のど
  ちらの引用符を使うか、といったことも自動で調整します。このチュートリ
  アルの作者は PostgreSQL を使っており、例題での出力は PostgreSQL の文
  法に準じています。

* :djadmin:`sql` コマンドを実行しても、実際にデータベースで SQL を実行
  するわけではありません。 ``sql`` コマンドは、ユーザが Django の挙動を
  知りたいと考えたときのため、単に SQL 文をスクリーンに表示しているだけ
  です。必要なら、この SQL 文をコピーしてデータベースクライアントのプロ
  ンプトにペーストできますが、後ですぐ述べるように、 Django では SQL を
  データベースに commit させる簡単な方法を提供しています。

興味があるなら、以下のコマンドも実行してみてください:

* :djadmin:`python manage.py validate <validate>` -- モデルの構成にエ
  ラーがないか調べます。

* :djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- 各アプリケー
  ション向けに定義しておいた、カスタマイズ (テーブル形式の変更や制約)
  用の SQL 文を出力します。

* :djadmin:`python manage.py sqlclear polls <sqlclear>` -- アプリケーショ
  ン用のテーブルのうち、データベース上に存在するものについて必要に応じ
  て ``DROP TABLE`` 文を出力します。

* :djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- アプリケー
  ション用の ``CREATE INDEX`` 文を出力します。

* :djadmin:`python manage.py sqlall polls <sqlall>` -- 'sql',
  'sqlcustom', 'sqlindexes' コマンドを合わせたものです。

これらのコマンドの出力を見れば、水面下で実際に行われていることを理解する助
けになるでしょう。

:djadmin:`syncdb` を再度実行して、モデルテーブルをデータベース上に作成しま
しょう:

.. code-block:: bash

    python manage.py syncdb

:djadmin:`syncdb` コマンドは :setting:`INSTALLED_APPS` に登録されているアプ
リケーションのうち、データベース上にまだ存在しないものに対して
:djadmin:`sqlall` で生成した SQL を生成します。これによって、最後に
:djadmin:`syncdb` を実行した時以後に新たにプロジェクトに追加されたアプリケー
ションのテーブルと初期データ、インデクスを生成します。  :djadmin:`syncdb`
はその都度存在しないテーブルだけを生成するので、繰り返し実行してもかまいま
せん。


``manage.py`` ユーティリティでできることについては
:doc:`django-admin.py のドキュメント </ref/django-admin>` を読んで下さい。


API で遊んでみる
================

さて、Python 対話シェルを起動して、 Django が提供する API で遊んでみましょ
う。 Python シェルを起動するには、以下のコマンドを実行します:

.. code-block:: bash

    python manage.py shell

単に "python" を実行しないのは、 Django に :file:`settings.py` ファイルへの
import パスを与える ``DJANGO_SETTINGS_MODULE`` の環境変数を :file:`manage.py`
で設定しているからです。

.. admonition:: manage.py を使わずに済ませる方法

    :file:`manage.py` を使いたくなくても、問題はありません。環境変数
    ``DJANGO_SETTINGS_MODULE`` を ``mysite.settings`` に設定して、
    :file:`manage.py` と同じディレクトリで ``python`` を実行してください
    (または ``import mysite`` が通るように、ディレクトリが Python のパス上
    にあるようにしてください) 。

    詳しくは :doc:`django-admin.py のドキュメント </ref/django-admin>` を参
    照してください。

シェルに入ったら、 :doc:`データベース API </topics/db/queries>` の世界を探検
してみましょう::

    >>> from polls.models import Poll, Choice # モデルクラスを import します。

    # まだ Poll は一つもできていません。
    >>> Poll.objects.all()
    []

    # 新たな Poll を作成しましょう。
    # デフォルト設定ファイルでタイムゾーンへのサポートが使用可能になって
    # いるので、 Django は pub_date に対して tzinfo を伴った datetime を
    # 期待します。 datetime.datetime.now() の代わりに timezone.now() を使用
    # してください。
    >>> from django.utils import timezone
    >>> p = Poll(question="What's new?", pub_date=timezone.now())

    # 出来たオブジェクトをデータベースに保存します。 save() は明示的に呼ば
    # ねばなりません。
    >>> p.save()

    # これでオブジェクトに ID が割り当てられました。お使いのデータベースに
    # よっては、この値は "1" ではなく "1L" のときもあります。心配することは
    # ありません。単にデータベースバックエンドが Python 長整数型で値を返す
    # ようになっているだけのことです。
    >>> p.id
    1

    # データベースの各カラムに Python の属性としてアクセスします。
    >>> p.question
    "What's new?"
    >>> p.pub_date
    datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

    # 属性を変更して save() を呼び出すとカラムの値を変更します。
    >>> p.question = "What's up?"
    >>> p.save()

    # objects.all() はデータベース上の全ての Poll を返します。
    >>> Poll.objects.all()
    [<Poll: Poll object>]


おっと、ちょっと待って下さい。 ``<Poll: Poll object>`` なんて全然親切な表現
ではありませんね。そこで (``polls/models.py`` ファイルに定義されている)
polls 関係のモデルを少し修正して、 ``Poll`` と ``Choice`` に
:meth:`~django.db.models.Model.__unicode__` メソッドを追加しましょう::

    class Poll(models.Model):
        # ...
        def __unicode__(self):
            return self.question

    class Choice(models.Model):
        # ...
        def __unicode__(self):
            return self.choice

:meth:`~django.db.models.Model.__unicode__` をモデルに追加しておく重要性は、
対話プロンプトで扱うときに精神的によいだけでなく、Django が自動生成する管理
インタフェースのいたるところでオブジェクトの表現 (representation) が使われ
ているという点にもあります。


.. admonition:: なぜ :meth:`~django.db.models.Model.__str__` ではなく :meth:`~django.db.models.Model.__unicode__` を使うの？

    Python に詳しければ、普段は :meth:`~django.db.models.Model.__str__` で
    はなく :meth:`~django.db.models.Model.__unicode__` を実装していることで
    しょう。 :meth:`~django.db.models.Model.__unicode__` を使うのは、Django
    のモデルがデフォルトで Unicode を扱うからです。 Django では、データベー
    ス上に保存された文字列の情報は、取り出すときに全て Unicode 型に変換され
    ます。

    Django のモデルは、デフォルトで
    :meth:`~django.db.models.Model.__str__` メソッドを実装していて、中で
    :meth:`~django.db.models.Model.__unicode__` を呼び出して、得た結果を
    UTF-8 のバイト文字列に変換しています。従って、 ``unicode(p)`` は
    Unicode 文字列を返し、 ``str(p)`` は UTF-8 でエンコードされた通常の文字
    列を返します。この仕様がよくわからなければ、とにかく
    :meth:`~django.db.models.Model.__unicode__` をモデルに追加するのだと覚
    えておいてください。なにはともあれ、それでうまく動作します。

:meth:`~django.db.models.Model.__unicode__` は通常の Python メソッドという
ことに注意してください。デモ用にカスタムのメソッドを追加してみましょう::

    import datetime
    from django.utils import timezone
    # ...
    class Poll(models.Model):
        # ...
        def was_published_recently(self):
            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

``import datetime`` と ``from django.utils import timezone`` で Python の
標準モジュール :mod:`datetime` と Django のタイムゾーン関連ユーティリティの
:mod:`django.utils.timezone` を参照していることに注意してください。もし
Python でタイムゾーンを取り扱うことに不慣れな場合は、
:doc:`タイムゾーン </topics/i18n/timezones>` で勉強できます。

``python manage.py shell`` を実行して、Python 対話シェルに戻りましょう::

    >>> from polls.models import Poll, Choice

    # __unicode__() がきちんと働いていることを確認します。
    >>> Poll.objects.all()
    [<Poll: What's up?>]

    # Django は様々なデータベース照合 API を提供しています。 API はキーワー
    # ド引数で隅々まで操作できます。
    >>> Poll.objects.filter(id=1)
    [<Poll: What's up?>]
    >>> Poll.objects.filter(question__startswith='What')
    [<Poll: What's up?>]

    # 2012 年の Poll を取り出しましょう。
    >>> Poll.objects.get(pub_date__year=2012)
    <Poll: What's up?>

    >>> Poll.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Poll matching query does not exist.
    >>> Poll.objects.filter(question__startswith='What')
    [<Poll: What's up?>]

    # 主キーの照合はよくあることなので、 Django は主キーの厳密一致を照合
    # するショートカットを提供しています。
    # 以下の実行文は Poll.objects.get(id=1) と同じです。
    >>> Poll.objects.get(pk=1)
    <Poll: What's up?>

    # カスタムメソッドが動作するか確かめてみましょう。
    >>> p = Poll.objects.get(pk=1)
    >>> p.was_published_recently()
    True

    # Poll に二つの Choice を指定しましょう。 create を呼び出すと、新たな
    # Choice オブジェクトを生成し、 INSERT 文を実行し、 Poll からアクセス可
    # 能な Choice オブジェクトの集合に追加して、新たに作成された Choice オ
    # ブジェクトを返します。 Django は API を通してアクセス出来る "あちら側"
    # の外部キー (例えば poll の choice) を保持する set を作ります。
    >>> p = Poll.objects.get(pk=1)

    # 関連するオブジェクトの set から choice を表示します。現在は空です。
    >>>> p.choice_set.all()
    []

    # 3つの choice を作ります。
    >>> p.choice_set.create(choice='Not much', votes=0)
    <Choice: Not much>
    >>> p.choice_set.create(choice='The sky', votes=0)
    <Choice: The sky>
    >>> c = p.choice_set.create(choice='Just hacking again', votes=0)

    # Choice オブジェクトは自分に関連づけされた Poll オブジェクトに
    # アクセスするための API を備えています。
    >>> c.poll
    <Poll: What's up?>

    # 逆も行えます: Poll オブジェクトから Choice オブジェクトにアクセスでき
    # ます。
    >>> p.choice_set.all()
    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]
    >>> p.choice_set.count()
    3

    # API は必要に応じて自動的にリレーションを追跡します。リレーションを辿
    # るには二重アンダースコアを使います。この表記法には制限がなく、何段階
    # でも連鎖できます。以下の例では、 pub_date が 2012 の全ての Poll に関
    # 連づけられている Choice を返します。
    >>> Choice.objects.filter(poll__pub_date__year=2012)
    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]

    # choice を一つ削除しましょう。 delete() を使います。
    >>> c = p.choice_set.filter(choice__startswith='Just hacking')
    >>> c.delete()

リレーションモデルの詳細は、
:doc:`リレーションオブジェクトリファレンス </ref/models/relations>` を
参照してください。 API を通じたフィールドの照合のためのダブルアンダースコア
の使い方の詳細は、
:ref:`フィールドの照合 <field-lookups-intro>` を参照してください。
データベース API の詳細は、 
:doc:`データベース API リファレンス </topics/db/queries>` を参照してください。

API を使いこなせるようになったら、 
:doc:`チュートリアルその 2 </intro/tutorial02>` に進んで、Django が自動生成
する管理インタフェースを動かしてみましょう。
